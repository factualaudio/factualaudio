#!/bin/bash

# Postprocesses the site, i.e. optimizes it for production serving.
# This step is always optional and is not supposed to result in any
# externally visible changes to the site, aside from performance.

set -e
set -o pipefail
shopt -s nullglob
shopt -s dotglob
shopt -s globstar

[[ "$#" -eq 2 ]]
SITE_DIR="$1"
BASEURL="$2"

TMP_DIR=""
cleanup() {
        [[ -n "$TMP_DIR" ]] && rm -rf "$TMP_DIR"
}
trap cleanup EXIT
TMP_DIR="$(mktemp --directory --suffix=.factualaudio-postprocess-site)"

tidyhtml() {
	# We stop tidy from dropping empty elements because that results in
	# FontAwesome <i> tags being removed.

	tidy --drop-empty-elements false -numeric -wrap 0 -quiet "$@"
}

HTML_PAGE_FILES=()
for HTML_FILE in "$SITE_DIR"/**/*.html
do
	# Don't process redirect pages.
	[[ "$(grep --count --fixed-strings '<meta http-equiv="refresh"' -- "$HTML_FILE")" -eq 1 ]] && continue
	echo "Sanitizing $HTML_FILE" >&2
	tidyhtml -asxml -modify "$HTML_FILE"
	HTML_PAGE_FILES+=("$HTML_FILE")
done

mkdir "$TMP_DIR"/rss
./extract-rss-descriptions "$SITE_DIR"/index.xml "$TMP_DIR"/rss
HTML_RSS_FILES=()
for HTML_FILE in "$TMP_DIR"/rss/*.html
do
	echo "Sanitizing RSS item $HTML_FILE" >&2
	{
		# Prevent HTML Tidy warnings about missing boilerplate.
		# The meta tag is there to trick HTML Tidy into recognizing the document as HTML5
		# (otherwise it thinks it's XHTML 1.0 for some reason)
		echo '<!DOCTYPE html>'
		echo '<html><head><title></title><meta charset="utf-8" /></head><body>'
		cat "$HTML_FILE"
		echo '</body></html>'
	} | tidyhtml -asxml > "$HTML_FILE.tidy"
	mv "$HTML_FILE.tidy" "$HTML_FILE"
	HTML_RSS_FILES+=("$HTML_FILE")
done
HTML_FILES=("${HTML_PAGE_FILES[@]}" "${HTML_RSS_FILES[@]}")

for HTML_FILE in "${HTML_FILES[@]}"
do
	echo "Checking $HTML_FILE for absolute links" >&2
	xsltproc enforce-absolute-links.xsl "$HTML_FILE"
done

echo 'Concatenating assets' >&2
ASSET_CONCATENATION_MANIFEST="$SITE_DIR/ASSET-CONCATENATION-MANIFEST"
xsltproc --output "$ASSET_CONCATENATION_MANIFEST" generate-concatenate-manifest.xsl "$SITE_DIR"/index.html
./concatenate-assets "$SITE_DIR" "$BASEURL" < "$ASSET_CONCATENATION_MANIFEST"

for CSS_FILE in "$SITE_DIR"/**/*.css
do
	echo "Optimizing $CSS_FILE" >&2
	csso "$CSS_FILE" "$CSS_FILE.optimized" --comments none
	mv "$CSS_FILE.optimized" "$CSS_FILE"
done

for JS_FILE in "$SITE_DIR"/**/*.js
do
	echo "Optimizing $JS_FILE" >&2
	uglifyjs --compress --mangle --output "$JS_FILE.optimized" -- "$JS_FILE"
	mv "$JS_FILE.optimized" "$JS_FILE"
done

echo "Optimizing SVG" >&2
svgo --disable=removeViewBox --enable=removeDimensions "$SITE_DIR"/**/*.svg

echo "Optimizing PNG" >&2
PNG_FILES=("$SITE_DIR"/**/*.png)
parallel --will-cite -v --progress --bar --eta --halt now,fail=1 --shuf zopflipng {} {}.zopfli ::: "${PNG_FILES[@]}"
for PNG_FILE in "${PNG_FILES[@]}"
do
	mv "$PNG_FILE.zopfli" "$PNG_FILE"
done

echo "Generating image manifest" >&2
IMAGE_MANIFEST="$SITE_DIR/IMAGE-MANIFEST.xml"
./generate-image-manifest "$SITE_DIR" "$BASEURL" > "$IMAGE_MANIFEST"

echo 'Fingerprinting asssets' >&2
FINGERPRINT_RENAME_MANIFEST="$SITE_DIR/FINGERPRINT-RENAME-MANIFEST.xml"
./fingerprint-assets "$SITE_DIR" "$BASEURL" > "$FINGERPRINT_RENAME_MANIFEST"

for HTML_FILE in "${HTML_PAGE_FILES[@]}"
do
	echo "Replacing assets for $HTML_FILE" >&2

	# Double-check that every page has the same concatenated assets as /index.html, to prevent potential inconsistencies.
	xsltproc generate-concatenate-manifest.xsl "$HTML_FILE" | cmp "$ASSET_CONCATENATION_MANIFEST"

	xsltproc --stringparam manifest "$IMAGE_MANIFEST" process-intrinsic-placeholders.xsl "$HTML_FILE" |
	xsltproc --output "$HTML_FILE.concatenated" replace-concatenated-assets.xsl -
	mv "$HTML_FILE.concatenated" "$HTML_FILE"
done

for HTML_FILE in "${HTML_FILES[@]}"
do
	echo "Replacing links in $HTML_FILE" >&2

	xsltproc --stringparam manifest "$FINGERPRINT_RENAME_MANIFEST" replace-links.xsl "$HTML_FILE" |
	xsltproc --output "$HTML_FILE.links" html5-doctype.xsl -
	mv "$HTML_FILE.links" "$HTML_FILE"
done

for HTML_FILE in "${HTML_PAGE_FILES[@]}"
do
	echo "Generating $HTML_FILE" >&2
	tidyhtml -ashtml --doctype html5 -modify "$HTML_FILE"
done

# Workaround for https://github.com/htacg/tidy-html5/issues/658
# Another approach could have been to output XHTML5,
# but then we would have to deal with https://github.com/htacg/tidy-html5/issues/660
sed --in-place '1!b; /^<?xml /d' "${HTML_PAGE_FILES[@]}"

for HTML_FILE in "${HTML_RSS_FILES[@]}"
do
	echo "Extracing body from $HTML_FILE" >&2
	tidyhtml --show-body-only yes -ashtml --doctype html5 "$HTML_FILE" |
	{
		echo '<?xml version="1.0" ?>'
		echo '<htmlbody>'
		sed 's/&/\&amp;/g; s/</\&lt;/g'
		echo '</htmlbody>'
	} > "$HTML_FILE.xml"
done

echo "Recombining HTML descriptions into RSS feed" >&2
xsltproc --stringparam descriptions-dir "$TMP_DIR"/rss --output "$SITE_DIR"/index.xml.final replace-rss-descriptions.xsl "$SITE_DIR"/index.xml
mv "$SITE_DIR"/index.xml.final "$SITE_DIR"/index.xml
