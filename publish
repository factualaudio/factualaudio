#!/bin/bash

# Generates the site and publishes it to the master branch on the provided git repository.
# All other options are passed to hugo.

set -e
set -o pipefail
shopt -s nullglob
shopt -s dotglob

REMOTE="$1"
shift

WORK_DIR=''
cleanup() {
	[[ -n "$WORK_DIR" ]] && rm -rf "$WORK_DIR"
}
trap cleanup EXIT

SOURCE_COMMIT="$(git rev-parse --verify HEAD)"
HUGO_VERSION="$(hugo version)"
MATPLOTLIB_VERSION="$(python3 -c 'import matplotlib; print(matplotlib.__version__)')"

WORK_DIR="$(mktemp --directory --suffix=.factualaudio-publish)"

mkdir "$WORK_DIR/site"
./generate-site "$WORK_DIR/site" "$@"

mkdir "$WORK_DIR/git"
workgit() {
	git -C "$WORK_DIR/git" "$@"
}
workgit init
workgit remote add origin "$REMOTE"
workgit pull origin master --depth=1

# For the raw directory (which is only there to make diffs and inspection easier),
# we replace the entire contents. For everything else however, it is very
# important to not clean up old files, because that might break content
# (especially fingerprinted static assets) that is already partially cached
# elsewhere (HTML pages but also RSS feeds).
workgit rm -r raw
cp --preserve --recursive --target-directory="$WORK_DIR/git/" --verbose -- "$WORK_DIR/site"/*
workgit add .

workgit commit \
	--message="Publishing from source repository commit $SOURCE_COMMIT" \
	--message "Hugo version: $HUGO_VERSION" \
	--message "matplotlib version: $MATPLOTLIB_VERSION"

workgit show --patch --stat --find-renames --find-copies --find-copies-harder || true
echo "For further inspection, go to $WORK_DIR" >&2
echo -n "Confirm push? (y) " >&2
read -r ANSWER
[[ "$ANSWER" = 'y' ]] || exit 1

workgit push origin master
